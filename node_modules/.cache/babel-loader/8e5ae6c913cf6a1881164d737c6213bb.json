{"ast":null,"code":"var _jsxFileName = \"/home/paula/pomodoro2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [initFocus, setInitFocus] = useState(25); //valores dos quadros\n\n  const [initInterval, setInitInterval] = useState(5); //valores dos quadros\n\n  const [timeFocus, setTimeFocus] = useState(25 * 60); //valores que serão modificados no cronometro\n\n  const [timeInterval, setTimeInterval] = useState(5 * 60); //valores que serão modificados no cronometro\n\n  const [statusFocus, setStatusFocus] = useState(true);\n  const [statusInterval, setStatusInterval] = useState(false); //funcao para reduzir tempo de foco pelo botao\n\n  function reduceTimeFocus() {\n    if (initFocus > 0) {\n      setInitFocus(initFocus - 1);\n      setTimeFocus(timeFocus - 60);\n    } else {\n      alert(\"O valor precisa ser maior que zero.\");\n    }\n  } //funcao para reduzir tempo de intervalo pelo botao\n\n\n  function reduceTimeInterval() {\n    if (initInterval > 0) {\n      setInitInterval(initInterval - 1);\n      setTimeInterval(timeInterval - 60);\n    } else {\n      alert(\"O valor precisa ser maior que zero.\");\n    }\n  } //funcao para adicionar tempo de foco pelo botao\n\n\n  function addTimeFocus() {\n    setInitFocus(initFocus + 1);\n    setTimeFocus(timeFocus + 60);\n  } //funcao para adicionar tempo de intervalo pelo botao\n\n\n  function addTimeInterval() {\n    setInitInterval(initInterval + 1);\n    setTimeInterval(timeInterval + 60);\n  }\n  /*Operações sobre o cronometro*/\n\n\n  function startTimeFocus() {\n    //ativa o cronometro\n    setStatusFocus(true);\n  }\n\n  function pauseTime() {\n    //pausa o cronometro\n    setStatus(false);\n  }\n\n  function resetTimeFocus() {\n    //reinicia o cronometro de foco\n    setStatus(false);\n    setTimeFocus(initFocus);\n  }\n\n  function resetTimeInterval() {\n    //reinicia o cronometro de intervalo\n    setStatus(false);\n    setTimeInterval(initInterval);\n  }\n  /*as seções vão acontecer da seguinte maneira:\n    o cronometro de intervalo começa quando status for false e timeFocus for igual a zero.\n    cronometro de foco reativa automaticamente quando status for false e timeInterval for igual a zero.*/\n  //funcoes para auxiliar na contagem do cronometro\n\n\n  function decrementSecondsFocus() {\n    //decrementa os segundos de tempo de foco\n    setTimeFocus(timeFocus - 1);\n\n    if (timeFocus === 0) {\n      setStatusFocus(false);\n    }\n  }\n\n  function decrementSecondsInterval() {\n    //decrementa os segundos de tempo de intervalo\n    setTimeInterval(timeInterval - 1);\n\n    if (timeInterval === 0) {\n      setStatusInterval(false);\n    }\n  } //realiza as operações sobre o cronometro acompanhando os estados\n\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n\n      if (statusFocus === false && timeFocus === 0) {\n        setStatusInterval(true);\n        decrementSecondsInterval();\n      } else if (statusInterval === false && timeInterval === 0) {\n        setStatusFocus(true);\n        decrementSecondsFocus();\n      } else if (statusFocus === true && timeFocus != 0) {\n        console.log(\"statusFocus === true\");\n        decrementSecondsFocus();\n      } else if (statusInterval === true && timeInterval !== 0) {\n        decrementSecondsInterval();\n      }\n    }, 1000);\n  }, [statusFocus, statusInterval, timeFocus, timeInterval]); //preparando os segundos para mostrar na tela\n  //converte segundos em minutos\n\n  function getMinutes(seconds) {\n    return Math.floor(seconds / 60);\n  } //pega a parte dos segundos\n\n\n  function getSeconds(seconds) {\n    return seconds % 60;\n  }\n\n  const minutesFocus = getMinutes(timeFocus);\n  const secondsFocus = getSeconds(timeFocus);\n  const screenMinutesFocus = minutesFocus < 10 ? `0${minutesFocus}` : minutesFocus;\n  const screenSecondsFocus = secondsFocus < 10 ? `0${secondsFocus}` : secondsFocus;\n  const minutesInterval = getMinutes(timeInterval);\n  const secondsInterval = getSeconds(timeInterval);\n  const screenMinutesInterval = minutesInterval < 10 ? `0${minutesInterval}` : minutesInterval;\n  const screenSecondsInterval = secondsInterval < 10 ? `0${secondsInterval}` : secondsInterval;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [\"Tempo de foco \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: initFocus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reduceTimeFocus,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTimeFocus,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 14\n    }, this), \"Tempo de intervalo\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: initInterval\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reduceTimeInterval,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTimeInterval,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [screenMinutesFocus, \":\", screenSecondsFocus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FYu4yQpClFtArH8jdEiFRj3Suc8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/paula/pomodoro2/src/App.js"],"names":["React","useState","useEffect","App","initFocus","setInitFocus","initInterval","setInitInterval","timeFocus","setTimeFocus","timeInterval","setTimeInterval","statusFocus","setStatusFocus","statusInterval","setStatusInterval","reduceTimeFocus","alert","reduceTimeInterval","addTimeFocus","addTimeInterval","startTimeFocus","pauseTime","setStatus","resetTimeFocus","resetTimeInterval","decrementSecondsFocus","decrementSecondsInterval","interval","setInterval","clearInterval","console","log","getMinutes","seconds","Math","floor","getSeconds","minutesFocus","secondsFocus","screenMinutesFocus","screenSecondsFocus","minutesInterval","secondsInterval","screenMinutesInterval","screenSecondsInterval"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nfunction App() {\n  const [initFocus, setInitFocus] = useState(25); //valores dos quadros\n  const [initInterval, setInitInterval] = useState(5); //valores dos quadros\n  const [timeFocus, setTimeFocus] = useState(25*60); //valores que serão modificados no cronometro\n  const [timeInterval, setTimeInterval] = useState(5*60); //valores que serão modificados no cronometro\n  const [statusFocus, setStatusFocus] = useState(true);\n  const [statusInterval, setStatusInterval] = useState(false);\n\n  //funcao para reduzir tempo de foco pelo botao\n  function reduceTimeFocus(){\n    if(initFocus > 0){\n      setInitFocus(initFocus-1);\n      setTimeFocus(timeFocus-60);\n    }else{\n      alert(\"O valor precisa ser maior que zero.\")\n    }\n  }\n\n  //funcao para reduzir tempo de intervalo pelo botao\n  function reduceTimeInterval(){\n    if(initInterval > 0){\n      setInitInterval(initInterval-1);\n      setTimeInterval(timeInterval-60);\n\n    }else{\n      alert(\"O valor precisa ser maior que zero.\")\n    }\n  }\n\n  //funcao para adicionar tempo de foco pelo botao\n  function addTimeFocus(){\n    setInitFocus(initFocus+1);\n    setTimeFocus(timeFocus+60);\n  }\n\n  //funcao para adicionar tempo de intervalo pelo botao\n  function addTimeInterval(){\n    setInitInterval(initInterval+1);\n    setTimeInterval(timeInterval+60);\n  }\n\n  /*Operações sobre o cronometro*/\n\n  function startTimeFocus(){ //ativa o cronometro\n    setStatusFocus(true);\n  }\n\n  function pauseTime(){ //pausa o cronometro\n    setStatus(false);\n  }\n\n  function resetTimeFocus(){ //reinicia o cronometro de foco\n    setStatus(false);\n    setTimeFocus(initFocus);\n  }\n\n  function resetTimeInterval(){ //reinicia o cronometro de intervalo\n    setStatus(false);\n    setTimeInterval(initInterval);\n  }\n\n  /*as seções vão acontecer da seguinte maneira:\n    o cronometro de intervalo começa quando status for false e timeFocus for igual a zero.\n    cronometro de foco reativa automaticamente quando status for false e timeInterval for igual a zero.*/\n\n  //funcoes para auxiliar na contagem do cronometro\n\n  function decrementSecondsFocus(){ //decrementa os segundos de tempo de foco\n    setTimeFocus(timeFocus-1);\n    if(timeFocus === 0){\n      setStatusFocus(false);\n    }\n  }\n\n  function decrementSecondsInterval(){ //decrementa os segundos de tempo de intervalo\n    setTimeInterval(timeInterval-1);\n    if(timeInterval === 0){\n      setStatusInterval(false);\n    }\n  }\n\n  //realiza as operações sobre o cronometro acompanhando os estados\n  useEffect(() => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n\n      if(statusFocus === false && timeFocus === 0){\n        setStatusInterval(true);\n        decrementSecondsInterval();\n      }else if(statusInterval === false && timeInterval === 0){\n        setStatusFocus(true);\n        decrementSecondsFocus();\n      }else if(statusFocus === true && timeFocus != 0){\n        console.log(\"statusFocus === true\");\n        decrementSecondsFocus();\n      }else if(statusInterval === true && timeInterval !== 0){\n        decrementSecondsInterval();\n      }\n    }, 1000);\n  }, [statusFocus, statusInterval, timeFocus, timeInterval]);\n\n\n  //preparando os segundos para mostrar na tela\n\n  //converte segundos em minutos\n  function getMinutes(seconds){\n    return Math.floor(seconds/60);\n  }\n\n  //pega a parte dos segundos\n  function getSeconds(seconds){\n    return seconds%60;\n  }\n\n  const minutesFocus = getMinutes(timeFocus);\n  const secondsFocus = getSeconds(timeFocus);\n  const screenMinutesFocus = minutesFocus < 10 ? `0${minutesFocus}` : minutesFocus;\n  const screenSecondsFocus = secondsFocus < 10 ? `0${secondsFocus}` : secondsFocus;\n\n  const minutesInterval = getMinutes(timeInterval);\n  const secondsInterval = getSeconds(timeInterval);\n  const screenMinutesInterval = minutesInterval < 10 ? `0${minutesInterval}` : minutesInterval;\n  const screenSecondsInterval = secondsInterval < 10 ? `0${secondsInterval}` : secondsInterval;\n\n  return(\n    <div className=\"container\">\n      Tempo de foco <br></br>\n      <h1>{initFocus}</h1>\n      <button onClick={reduceTimeFocus}>-</button>\n      <button onClick={addTimeFocus}>+</button>\n    <br></br><br></br>\n      Tempo de intervalo<br></br>\n      <h1>{initInterval}</h1>\n      <button onClick={reduceTimeInterval}>-</button>\n      <button onClick={addTimeInterval}>+</button>\n\n      <br></br><br></br>\n      <div className=\"message\">\n         <div>{screenMinutesFocus}:{screenSecondsFocus}</div>\n      </div>\n    </div>\n\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}