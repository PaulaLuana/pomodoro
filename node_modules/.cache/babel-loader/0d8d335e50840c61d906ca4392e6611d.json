{"ast":null,"code":"var _jsxFileName = \"/home/paula/pomodoro2/src/relogio-focus.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction focus() {\n  _s();\n\n  const [initFocus, setInitFocus] = useState(25); //valores dos quadros\n\n  const [timeFocus, setTimeFocus] = useState(25 * 60); //valores que serão modificados no cronometro\n\n  const [statusFocus, setStatusFocus] = useState(false); //funcao para reduzir tempo de foco pelo botao\n\n  function reduceTimeFocus() {\n    if (initFocus > 0) {\n      setInitFocus(initFocus - 1);\n      setTimeFocus(timeFocus - 60);\n    } else {\n      alert(\"O valor precisa ser maior que zero.\");\n    }\n  } //funcao para adicionar tempo de foco pelo botao\n\n\n  function addTimeFocus() {\n    setInitFocus(initFocus + 1);\n    setTimeFocus(timeFocus + 60);\n  }\n  /*Operações sobre o cronometro*/\n\n\n  function startTime() {\n    //ativa o cronometro\n    setStatusFocus(true);\n  }\n\n  function pauseTime() {\n    //pausa o cronometro\n    setStatusFocus(false);\n  }\n\n  function resetTimeFocus() {\n    //reinicia o cronometro de foco\n    setStatus(false);\n    setTimeFocus(initFocus);\n  }\n  /*as seções vão acontecer da seguinte maneira:\n    o cronometro de intervalo começa quando status for false e timeFocus for igual a zero.\n    cronometro de foco reativa automaticamente quando status for false e timeInterval for igual a zero.*/\n  //funcoes para auxiliar na contagem do cronometro\n\n\n  function decrementSecondsFocus() {\n    //decrementa os segundos de tempo de foco\n    setTimeFocus(timeFocus - 1);\n\n    if (timeFocus === 0) {\n      setStatusFocus(false);\n    }\n  } //realiza as operações sobre o cronometro acompanhando os estados\n\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n\n      if (statusFocus === true && timeFocus > 0) {\n        decrementSecondsFocus();\n      }\n    }, 1000);\n  }, [statusFocus, timeFocus]); //preparando os segundos para mostrar na tela\n  //converte segundos em minutos\n\n  function getMinutes(seconds) {\n    return Math.floor(seconds / 60);\n  } //pega a parte dos segundos\n\n\n  function getSeconds(seconds) {\n    return seconds % 60;\n  }\n\n  const minutesFocus = getMinutes(timeFocus);\n  const secondsFocus = getSeconds(timeFocus);\n  const screenMinutesFocus = minutesFocus < 10 ? `0${minutesFocus}` : minutesFocus;\n  const screenSecondsFocus = secondsFocus < 10 ? `0${secondsFocus}` : secondsFocus;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [screenMinutesFocus, \":\", screenSecondsFocus]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n}\n\n_s(focus, \"pJ8V2ISfHQGI6fm51Ko9zlx1Y68=\");\n\nexport default focus;","map":{"version":3,"sources":["/home/paula/pomodoro2/src/relogio-focus.js"],"names":["React","useState","useEffect","focus","initFocus","setInitFocus","timeFocus","setTimeFocus","statusFocus","setStatusFocus","reduceTimeFocus","alert","addTimeFocus","startTime","pauseTime","resetTimeFocus","setStatus","decrementSecondsFocus","interval","setInterval","clearInterval","getMinutes","seconds","Math","floor","getSeconds","minutesFocus","secondsFocus","screenMinutesFocus","screenSecondsFocus"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AACA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,EAAD,CAA1C,CADe,CACiC;;AAChD,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAG,EAAJ,CAA1C,CAFe,CAEoC;;AACnD,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C,CAHe,CAKf;;AACA,WAASS,eAAT,GAA0B;AACxB,QAAGN,SAAS,GAAG,CAAf,EAAiB;AACfC,MAAAA,YAAY,CAACD,SAAS,GAAC,CAAX,CAAZ;AACAG,MAAAA,YAAY,CAACD,SAAS,GAAC,EAAX,CAAZ;AACD,KAHD,MAGK;AACHK,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACD;AACF,GAbc,CAef;;;AACA,WAASC,YAAT,GAAuB;AACrBP,IAAAA,YAAY,CAACD,SAAS,GAAC,CAAX,CAAZ;AACAG,IAAAA,YAAY,CAACD,SAAS,GAAC,EAAX,CAAZ;AACD;AACD;;;AAEA,WAASO,SAAT,GAAoB;AAAE;AACpBJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,WAASK,SAAT,GAAoB;AAAE;AACpBL,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,WAASM,cAAT,GAAyB;AAAE;AACzBC,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAT,IAAAA,YAAY,CAACH,SAAD,CAAZ;AACD;AAED;AACF;AACA;AAEE;;;AAEA,WAASa,qBAAT,GAAgC;AAAE;AAChCV,IAAAA,YAAY,CAACD,SAAS,GAAC,CAAX,CAAZ;;AACA,QAAGA,SAAS,KAAK,CAAjB,EAAmB;AACjBG,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GA9Cc,CAgDf;;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BC,MAAAA,aAAa,CAACF,QAAD,CAAb;;AACA,UAAGV,WAAW,KAAK,IAAhB,IAAwBF,SAAS,GAAG,CAAvC,EAAyC;AACrCW,QAAAA,qBAAqB;AACxB;AACF,KALyB,EAKvB,IALuB,CAA1B;AAMD,GAPQ,EAON,CAACT,WAAD,EAAcF,SAAd,CAPM,CAAT,CAjDe,CA2Df;AAEA;;AACA,WAASe,UAAT,CAAoBC,OAApB,EAA4B;AAC1B,WAAOC,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAC,EAAnB,CAAP;AACD,GAhEc,CAkEf;;;AACA,WAASG,UAAT,CAAoBH,OAApB,EAA4B;AAC1B,WAAOA,OAAO,GAAC,EAAf;AACD;;AAED,QAAMI,YAAY,GAAGL,UAAU,CAACf,SAAD,CAA/B;AACA,QAAMqB,YAAY,GAAGF,UAAU,CAACnB,SAAD,CAA/B;AACA,QAAMsB,kBAAkB,GAAGF,YAAY,GAAG,EAAf,GAAqB,IAAGA,YAAa,EAArC,GAAyCA,YAApE;AACA,QAAMG,kBAAkB,GAAGF,YAAY,GAAG,EAAf,GAAqB,IAAGA,YAAa,EAArC,GAAyCA,YAApE;AAEA,sBACI;AAAA,eACKC,kBADL,OAC0BC,kBAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD;;GAnFQ1B,K;;AAqFT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nfunction focus() {\n  const [initFocus, setInitFocus] = useState(25); //valores dos quadros\n  const [timeFocus, setTimeFocus] = useState(25*60); //valores que serão modificados no cronometro\n  const [statusFocus, setStatusFocus] = useState(false);\n\n  //funcao para reduzir tempo de foco pelo botao\n  function reduceTimeFocus(){\n    if(initFocus > 0){\n      setInitFocus(initFocus-1);\n      setTimeFocus(timeFocus-60);\n    }else{\n      alert(\"O valor precisa ser maior que zero.\")\n    }\n  }\n\n  //funcao para adicionar tempo de foco pelo botao\n  function addTimeFocus(){\n    setInitFocus(initFocus+1);\n    setTimeFocus(timeFocus+60);\n  }\n  /*Operações sobre o cronometro*/\n\n  function startTime(){ //ativa o cronometro\n    setStatusFocus(true);\n  }\n\n  function pauseTime(){ //pausa o cronometro\n    setStatusFocus(false);\n  }\n\n  function resetTimeFocus(){ //reinicia o cronometro de foco\n    setStatus(false);\n    setTimeFocus(initFocus);\n  }\n\n  /*as seções vão acontecer da seguinte maneira:\n    o cronometro de intervalo começa quando status for false e timeFocus for igual a zero.\n    cronometro de foco reativa automaticamente quando status for false e timeInterval for igual a zero.*/\n\n  //funcoes para auxiliar na contagem do cronometro\n\n  function decrementSecondsFocus(){ //decrementa os segundos de tempo de foco\n    setTimeFocus(timeFocus-1);\n    if(timeFocus === 0){\n      setStatusFocus(false);\n    }\n  }\n\n  //realiza as operações sobre o cronometro acompanhando os estados\n  useEffect(() => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n      if(statusFocus === true && timeFocus > 0){\n          decrementSecondsFocus();\n      }\n    }, 1000);\n  }, [statusFocus, timeFocus]);\n\n\n  //preparando os segundos para mostrar na tela\n\n  //converte segundos em minutos\n  function getMinutes(seconds){\n    return Math.floor(seconds/60);\n  }\n\n  //pega a parte dos segundos\n  function getSeconds(seconds){\n    return seconds%60;\n  }\n\n  const minutesFocus = getMinutes(timeFocus);\n  const secondsFocus = getSeconds(timeFocus);\n  const screenMinutesFocus = minutesFocus < 10 ? `0${minutesFocus}` : minutesFocus;\n  const screenSecondsFocus = secondsFocus < 10 ? `0${secondsFocus}` : secondsFocus;\n\n  return(   \n      <div>\n          {screenMinutesFocus}:{screenSecondsFocus}\n      </div>\n\n    \n  );\n}\n\nexport default focus;\n"]},"metadata":{},"sourceType":"module"}